name: Deploy service
description: >-
  Copies the service's Docker image to the target environment's ECR repository, tags the image with
  'latest' and updates the ECS service, forcing a new deployment to happen.

inputs:
  version:
    description: The version of the service and its build artifacts
    required: true
  environment:
    description: The name of the GitHub deployment environment
    required: true

runs:
  using: composite
  steps:
    - name: Create GitHub deployment
      uses: chrnorm/deployment-action@55729fcebec3d284f60f5bcabbd8376437d696b1  # v2.0.7
      id: create-deployment
      with:
        token: ${{ github.token }}
        environment: ${{ inputs.environment }}
        payload: "https://github.com/actions/runner/issues/2120"  # allows filtering of deployments

    - name: Deploy
      shell: bash
      run: |
        echo deploying version '${{ inputs.version }}'
        # false
        sleep 5
        echo "deployment completed"

    - name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@9a72af4586197112e0491ea843682b5dc280d806  # v2.0.3
      with:
        token: ${{ github.token }}
        deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
        state: success

    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@9a72af4586197112e0491ea843682b5dc280d806  # v2.0.3
      with:
        token: ${{ github.token }}
        deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
        state: failure
